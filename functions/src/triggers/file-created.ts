import {Storage} from '@google-cloud/storage';
import * as functions from 'firebase-functions';
import {unlink} from 'fs';
import {tmpdir} from 'os';
import {basename, dirname, join} from 'path';
import * as sharp from 'sharp';
import {promisify} from 'util';

const THUMB_MEDIUM = {width: 600, height: 600};
const THUMB_SMALL = {width: 200, height: 200};

export const fileCreated = functions.storage
  .object()
  .onFinalize(async ({bucket, name, contentType, metadata}) => {
    const fileName = basename(name);
    const dirName = dirname(name);

    /**
     * Create thumbnails for an uploaded image
     */
    if (contentType.startsWith('image/')) {
      /**
       * Skip if the file is already a thumb or is autogenerated
       */
      if (fileName.startsWith('thumb_') || (metadata && metadata.generated)) {
        return null;
      }

      const tempFilePaths: {[key: string]: string} = {
        main: join(tmpdir(), fileName),
        medium: join(tmpdir(), 'thumb_m_' + fileName),
        small: join(tmpdir(), 'thumb_s_' + fileName)
      };
      const webpFiles: Array<{
        source: string;
        destination: string;
        name: string;
      }> = [];

      /**
       * Only create webp versions if the file isn't webp already
       */
      if (!fileName.endsWith('.webp')) {
        const webp = fileName.replace(/(.jpg|.png|.jpeg)/, '.webp');

        tempFilePaths.mainWebp = join(tmpdir(), webp);
        tempFilePaths.mediumWebp = join(tmpdir(), 'thumb_m_' + webp);
        tempFilePaths.smallWebp = join(tmpdir(), 'thumb_s_' + webp);

        webpFiles.push(
          {
            source: tempFilePaths.main,
            destination: tempFilePaths.mainWebp,
            name: webp
          },
          {
            source: tempFilePaths.medium,
            destination: tempFilePaths.mediumWebp,
            name: 'thumb_m_' + webp
          },
          {
            source: tempFilePaths.small,
            destination: tempFilePaths.smallWebp,
            name: 'thumb_s_' + webp
          }
        );
      }

      const generateMetadata = {
        contentType,
        generated: true,
        source: fileName
      };
      const storage = new Storage().bucket(bucket);
      await storage.file(name).download({
        destination: tempFilePaths.main
      });

      await Promise.all([
        sharp(tempFilePaths.main)
          .resize(THUMB_MEDIUM.width, THUMB_MEDIUM.height, {fit: 'inside'})
          .toFile(tempFilePaths.medium),

        sharp(tempFilePaths.main)
          .resize(THUMB_SMALL.width, THUMB_SMALL.height, {fit: 'inside'})
          .toFile(tempFilePaths.small)
      ]);

      if (webpFiles) {
        await Promise.all(
          webpFiles.map(file =>
            sharp(file.source)
              .webp({lossless: true})
              .toFile(file.destination)
          )
        );
      }

      await Promise.all([
        storage.upload(tempFilePaths.medium, {
          metadata: generateMetadata,
          destination: join(dirName, 'thumb_m_' + fileName)
        }),
        storage.upload(tempFilePaths.small, {
          metadata: generateMetadata,
          destination: join(dirName, 'thumb_s_' + fileName)
        }),
        ...webpFiles.map(file =>
          storage.upload(file.destination, {
            metadata: {
              ...generateMetadata,
              contentType: 'image/webp'
            },
            destination: join(dirName, file.name)
          })
        )
      ]);

      await Promise.all(
        Object.values(tempFilePaths).map(fp => promisify(unlink)(fp))
      );
    }
  });
